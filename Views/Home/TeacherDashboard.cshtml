@{
    ViewData["Title"] = "Öğretmen Paneli";
    Layout = "_LayoutDashboard";
}

<div class="teacher-dashboard">
    <div class="container-fluid">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="welcome-header">
                    <h1 class="dashboard-title">
                        <i class="fas fa-chalkboard-teacher text-primary"></i>
                        Hoş Geldiniz, @ViewBag.UserName
                    </h1>
                    <p class="text-muted">Öğretmen Kontrol Paneli - Eğitim Yönetimi</p>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Sol Kolon - Paket Yönetimi -->
            <div class="col-md-8">
                <!-- İstatistik Kartı -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="stat-card modern">
                            <div class="stat-icon-wrapper">
                                <div class="stat-icon bg-gradient-primary">
                                    <i class="fas fa-users"></i>
                    </div>
                                    </div>
                            <div class="stat-content">
                                <h3 class="stat-number">@ViewBag.StudentCount</h3>
                                <p class="stat-label">Toplam Öğrenci</p>
                                <div class="stat-trend">
                                    <i class="fas fa-arrow-up text-success"></i>
                                    <span class="text-success">Aktif</span>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                    <div class="col-md-6">
                        <div class="stat-card modern">
                            <div class="stat-icon-wrapper">
                                <div class="stat-icon bg-gradient-success">
                                    <i class="fas fa-envelope"></i>
                            </div>
                                    </div>
                            <div class="stat-content">
                                <h3 class="stat-number" id="messageCount">0</h3>
                                <p class="stat-label">Yeni Mesaj</p>
                                <div class="stat-trend">
                                    <i class="fas fa-clock text-warning"></i>
                                    <span class="text-warning">Bekleyen</span>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>

                <!-- Paket Yönetimi -->
                <div class="card shadow-lg border-0 mb-4">
                    <div class="card-header bg-gradient-primary text-white border-0">
                        <h5 class="mb-0">
                            <i class="fas fa-box-open me-2"></i>
                            Eğitim Paketleri Yönetimi
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row" id="packageContainer">
                            <div class="text-center p-4">
                                <i class="fas fa-spinner fa-spin"></i>
                                <p class="mt-2">Paketler yükleniyor...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Talep Yönetimi -->
                <div class="card shadow-lg border-0 mb-4">
                    <div class="card-header bg-gradient-warning text-white border-0">
                        <h5 class="mb-0">
                            <i class="fas fa-clipboard-list me-2"></i>
                            Bekleyen Talepler
                        </h5>
                            </div>
                    <div class="card-body">
                        <div id="requestsContainer">
                            <div class="text-center p-4">
                                <i class="fas fa-spinner fa-spin"></i>
                                <p class="mt-2">Talepler yükleniyor...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sağ Kolon - Mesajlaşma -->
            <div class="col-md-4">
                <div class="card shadow-lg border-0">
                    <div class="card-header bg-gradient-success text-white border-0">
                        <h5 class="mb-0">
                            <i class="fas fa-comments me-2"></i>
                            Öğrenci Mesajları
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="student-message-list" id="studentMessageList" style="height: 400px; overflow-y: auto;">
                            <div class="text-center p-4">
                                <i class="fas fa-spinner fa-spin"></i>
                                <p class="mt-2">Mesajlar yükleniyor...</p>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-light border-0">
                        <div class="row g-2">
                            <div class="col-12">
                                <div class="input-group">
                                    <select class="form-select form-select-sm" id="replyToStudent">
                                        <option value="">Öğrenci Seçin</option>
                                    </select>
                                    <button class="btn btn-primary btn-sm" onclick="showReplyModal()">
                                        <i class="fas fa-reply me-1"></i>
                                        Mesaj Gönder
                                    </button>
                                </div>
                            </div>
                            <div class="col-12">
                                <button class="btn btn-success btn-sm w-100" onclick="loadGroupedMessages()">
                                    <i class="fas fa-refresh me-2"></i>
                                    Mesajları Yenile
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Öğrenci Sohbet Modal -->
<div class="modal fade" id="studentChatModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-gradient-primary text-white border-0">
                <h5 class="modal-title">
                    <i class="fas fa-comments me-2"></i>
                    <span id="chatStudentName">Öğrenci Sohbeti</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-0">
                <!-- Sohbet Alanı -->
                <div id="chatMessages" style="height: 400px; overflow-y: auto; padding: 15px; background-color: #f8f9fa;">
                    <div class="text-center p-4">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p class="mt-2">Sohbet yükleniyor...</p>
                    </div>
                </div>
                
                <!-- Mesaj Gönderme Alanı -->
                <div class="chat-input-area p-3 border-top bg-white">
                    <div class="row g-2">
                        <div class="col-md-3">
                            <select class="form-select form-select-sm" id="chatMessageSubject">
                                <option value="Genel Cevap">Genel Cevap</option>
                                <option value="LGS Konuları">LGS Konuları</option>
                                <option value="TYT Konuları">TYT Konuları</option>
                                <option value="AYT Konuları">AYT Konuları</option>
                                <option value="Teknik Destek">Teknik Destek</option>
                            </select>
                        </div>
                        <div class="col-md-7">
                            <textarea class="form-control form-control-sm" id="chatMessageContent" rows="2" 
                                    placeholder="Mesajınızı yazın..." style="resize: none;"></textarea>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-primary btn-sm w-100 h-100" onclick="sendChatMessage()">
                                <i class="fas fa-paper-plane"></i>
                                <br><small>Gönder</small>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Mesaj Gönderme Modal -->
<div class="modal fade" id="replyModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-gradient-primary text-white border-0">
                <h5 class="modal-title">
                    <i class="fas fa-paper-plane me-2"></i>
                    Öğrenciye Mesaj Gönder
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="teacherMessageForm">
                    <div class="mb-3">
                        <label for="teacherMessageStudent" class="form-label">Öğrenci</label>
                        <select class="form-select" id="teacherMessageStudent" required>
                            <option value="">Öğrenci Seçin</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="teacherMessageSubject" class="form-label">Konu</label>
                        <select class="form-select" id="teacherMessageSubject" required>
                            <option value="">Konu Seçin</option>
                            <option value="LGS Konuları">LGS Konuları</option>
                            <option value="TYT Konuları">TYT Konuları</option>
                            <option value="AYT Konuları">AYT Konuları</option>
                            <option value="Genel Bilgi">Genel Bilgi</option>
                            <option value="Teknik Destek">Teknik Destek</option>
                            <option value="Diğer">Diğer</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="teacherMessageContent" class="form-label">Mesajınız</label>
                        <textarea class="form-control" id="teacherMessageContent" rows="4" 
                                placeholder="Mesajınızı buraya yazın..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="sendTeacherMessage()">
                    <i class="fas fa-paper-plane me-2"></i>
                    Mesajı Gönder
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Paket Düzenleme Modal -->
<div class="modal fade" id="packageEditModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-gradient-warning text-dark border-0">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>
                    <span id="packageEditTitle">Paket Düzenle</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="packageEditForm">
                    <input type="hidden" id="packageId" />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="packageDescription" class="form-label">Paket Açıklaması</label>
                                <input type="text" class="form-control" id="packageDescription" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="packagePrice" class="form-label">Fiyat (₺)</label>
                                <input type="number" step="0.01" class="form-control" id="packagePrice" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="packageVideoCount" class="form-label">Video Sayısı</label>
                                <input type="number" class="form-control" id="packageVideoCount" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="packageTestCount" class="form-label">Test Sayısı</label>
                                <input type="number" class="form-control" id="packageTestCount" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="packageDuration" class="form-label">Süre (Ay)</label>
                                <input type="number" class="form-control" id="packageDuration" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Paket Özellikleri</label>
                        <div class="row" id="packageFeatures">
                            <!-- Özellikler dinamik olarak yüklenecek -->
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="packageIsActive">
                            <label class="form-check-label" for="packageIsActive">
                                Paket Aktif
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-warning" onclick="savePackage()">
                    <i class="fas fa-save me-2"></i>
                    Kaydet
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Öğrenci Listesi Modal -->
<div class="modal fade" id="studentsListModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-gradient-info text-white border-0">
                <h5 class="modal-title">
                    <i class="fas fa-users me-2"></i>
                    <span id="studentsListTitle">Paket Öğrencileri</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="studentsListContainer">
                    <div class="text-center p-4">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p class="mt-2">Öğrenciler yükleniyor...</p>
                    </div>
                    </div>
                    </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

<style>
.teacher-dashboard {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    min-height: 100vh;
    padding: 20px;
    margin: 0;
    width: 100%;
    position: relative;
}

.welcome-header {
    text-align: center;
    margin-bottom: 30px;
    color: #2c3e50;
}

.dashboard-title {
    color: #2c3e50;
    font-weight: 700;
    text-shadow: none;
    font-size: 2.5rem;
    margin-bottom: 10px;
}

.dashboard-title i {
    color: #3498db;
    margin-right: 15px;
}

.stat-card.modern {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.08);
    transition: all 0.4s ease;
    border: none;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
}

.stat-card.modern:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.12);
}

.stat-card.modern::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(45deg, #3498db, #2980b9);
}

.stat-icon-wrapper {
    display: flex;
    align-items: center;
    margin-bottom: 25px;
}

.stat-icon {
    width: 70px;
    height: 70px;
    border-radius: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 28px;
    color: white;
    margin-right: 20px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
}

.bg-gradient-primary {
    background: linear-gradient(45deg, #3498db, #2980b9) !important;
}

.bg-gradient-success {
    background: linear-gradient(45deg, #27ae60, #2ecc71) !important;
}

.bg-gradient-info {
    background: linear-gradient(45deg, #17a2b8, #20c997) !important;
}

.bg-gradient-warning {
    background: linear-gradient(45deg, #f39c12, #e67e22) !important;
}

.stat-content {
    flex-grow: 1;
}

.stat-number {
    font-size: 3rem;
    font-weight: 800;
    color: #2c3e50;
    margin-bottom: 8px;
    line-height: 1;
}

.stat-label {
    color: #7f8c8d;
    font-size: 1rem;
    margin-bottom: 12px;
    font-weight: 600;
}

.stat-trend {
    display: flex;
    align-items: center;
    font-size: 0.9rem;
    font-weight: 600;
}

.stat-trend i {
    margin-right: 8px;
}

.package-card {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.08);
    transition: all 0.4s ease;
    border: none;
    height: 300px;
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
}

.package-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
}

.package-card.lgs-card::before { background: linear-gradient(45deg, #27ae60, #2ecc71); }
.package-card.tyt-card::before { background: linear-gradient(45deg, #3498db, #2980b9); }
.package-card.ayt-card::before { background: linear-gradient(45deg, #e74c3c, #c0392b); }
.package-card.canliders-card::before { background: linear-gradient(45deg, #f39c12, #e67e22); }

.package-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 25px 50px rgba(0,0,0,0.15);
}

.package-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
}

.package-title {
    font-weight: 800;
    color: #2c3e50;
    margin: 0;
    font-size: 1.3rem;
}

.package-badge {
    background: linear-gradient(45deg, #95a5a6, #7f8c8d);
    color: white;
    padding: 6px 16px;
    border-radius: 25px;
    font-size: 0.9rem;
    font-weight: 700;
}

.package-content {
    flex-grow: 1;
}

.package-desc {
    color: #7f8c8d;
    font-size: 1rem;
    margin-bottom: 20px;
    line-height: 1.6;
    font-weight: 500;
}

.package-stats {
    margin-bottom: 25px;
}

.package-stats small {
    display: flex;
    align-items: center;
    color: #7f8c8d;
    font-weight: 600;
    font-size: 0.95rem;
}

.package-stats i {
    margin-right: 10px;
    color: #27ae60;
}

.package-actions {
    margin-top: auto;
    display: flex;
    gap: 12px;
}

.package-actions .btn {
    flex: 1;
    border-radius: 15px;
    font-weight: 700;
    font-size: 0.9rem;
    padding: 12px 16px;
}

.student-message-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #ecf0f1;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
    position: relative;
}

.student-message-item:hover {
    background-color: #f8f9fa;
    transform: translateX(5px);
}

.student-message-item:last-child {
    border-bottom: none;
}

.student-message-item.unread {
    background-color: #fff3cd;
    border-left: 4px solid #ffc107;
}

.student-message-item.unread:hover {
    background-color: #ffeaa7;
}

.student-avatar {
    margin-right: 15px;
    width: 45px;
    height: 45px;
    border-radius: 50%;
    background: linear-gradient(45deg, #3498db, #2980b9);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 1.2rem;
    flex-shrink: 0;
}

.student-content {
    flex-grow: 1;
    min-width: 0;
}

.student-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.student-name {
    font-weight: 700;
    color: #2c3e50;
    font-size: 1rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.student-time {
    color: #7f8c8d;
    font-size: 0.8rem;
    font-weight: 500;
    flex-shrink: 0;
    margin-left: 10px;
}

.student-last-message {
    color: #34495e;
    font-size: 0.9rem;
    margin: 0;
    line-height: 1.4;
    font-weight: 500;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.unread-badge {
    position: absolute;
    top: 10px;
    right: 15px;
    background: linear-gradient(45deg, #e74c3c, #c0392b);
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: bold;
    box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
}

.message-indicator {
    position: absolute;
    bottom: 10px;
    right: 15px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #27ae60;
}

.message-indicator.sent {
    background-color: #3498db;
}

.message-indicator.received {
    background-color: #e74c3c;
}

/* Eski mesaj stilleri (test için) */
.message-item {
    display: flex;
    align-items: flex-start;
    padding: 20px;
    border-bottom: 2px solid #ecf0f1;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
}

.message-item:hover {
    background-color: #f8f9fa;
    transform: translateX(8px);
}

.message-item:last-child {
    border-bottom: none;
}

.message-avatar {
    margin-right: 20px;
    width: 50px;
    text-align: center;
}

.message-avatar i {
    font-size: 1.8em;
    color: #3498db;
}

.message-content {
    flex-grow: 1;
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.message-sender {
    font-weight: 700;
    color: #2c3e50;
    font-size: 1rem;
}

.message-time {
    color: #7f8c8d;
    font-size: 0.9rem;
    font-weight: 500;
}

.message-text {
    color: #34495e;
    font-size: 1rem;
    margin: 0;
    line-height: 1.5;
    font-weight: 500;
}

.sent-message {
    background-color: #e3f2fd;
    border-left: 4px solid #3498db;
}

.received-message {
    background-color: #f3e5f5;
    border-left: 4px solid #9c27b0;
}

/* Chat Message Styles */
.chat-message-sent {
    max-width: 70%;
    background: linear-gradient(45deg, #3498db, #2980b9);
    color: white;
    border-radius: 20px 20px 5px 20px;
    padding: 15px 20px;
    margin-left: auto;
    box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
}

.chat-message-received {
    max-width: 70%;
    background-color: #ecf0f1;
    color: #2c3e50;
    border-radius: 20px 20px 20px 5px;
    padding: 15px 20px;
    margin-right: auto;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.chat-message-content p {
    margin: 0;
    word-wrap: break-word;
}

.chat-message-time {
    opacity: 0.7;
    font-size: 0.8rem;
    margin-top: 8px;
}

.chat-input-area {
    background-color: #fff;
}

.card {
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0,0,0,0.08);
}

.card-header {
    border-radius: 20px 20px 0 0 !important;
    font-weight: 700;
    font-size: 1.1rem;
}

.form-select, .form-control {
    border-radius: 15px;
    border: 2px solid #ecf0f1;
    font-weight: 500;
}

.form-select:focus, .form-control:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
}

.btn {
    border-radius: 15px;
    font-weight: 700;
    transition: all 0.3s ease;
    padding: 12px 24px;
    font-size: 1rem;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
}

.btn-sm {
    padding: 8px 16px;
    font-size: 0.9rem;
}

.modal-content {
    border-radius: 20px;
}

.modal-header {
    border-radius: 20px 20px 0 0 !important;
}

.modal-footer {
    border-radius: 0 0 20px 20px !important;
}

.request-item {
    background: white;
    border-radius: 15px;
    padding: 20px;
    margin-bottom: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
}

.request-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.12);
}

.request-item h6 {
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 8px;
}

.request-item p {
    color: #7f8c8d;
    font-weight: 500;
    margin-bottom: 5px;
}

.request-item small {
    color: #95a5a6;
    font-weight: 500;
}

.form-label {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 8px;
}

.form-check-label {
    font-weight: 600;
    color: #2c3e50;
}

.form-check-input:checked {
    background-color: #3498db;
    border-color: #3498db;
}
</style>

<script>
// Paketleri yükle
function loadPackages() {
    fetch('/Package/GetAll')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderPackages(data.data);
            } else {
                document.getElementById('packageContainer').innerHTML = '<div class="text-center p-4"><p class="text-danger">Paketler yüklenirken hata oluştu.</p></div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('packageContainer').innerHTML = '<div class="text-center p-4"><p class="text-danger">Paketler yüklenirken hata oluştu.</p></div>';
        });
}

function renderPackages(packages) {
    const container = document.getElementById('packageContainer');
    let packagesHtml = '';
    
    packages.forEach(pkg => {
        const packageClass = pkg.name.toLowerCase().replace(' ', '-') + '-card';
        
        packagesHtml += `
            <div class="col-md-4 mb-4">
                <div class="package-card ${packageClass}">
                    <div class="package-header">
                        <h6 class="package-title">${pkg.name} Paketi</h6>
                        <span class="package-badge">${pkg.grade}</span>
                    </div>
                    <div class="package-content">
                        <p class="package-desc">${pkg.description}</p>
                        <div class="package-stats">
                            <small>
                                <i class="fas fa-users"></i> ${pkg.studentCount || 0} Öğrenci
                            </small>
                        </div>
                    </div>
                    <div class="package-actions">
                        <button class="btn btn-outline-primary" onclick="editPackage('${pkg.name.toLowerCase()}')">
                            <i class="fas fa-edit"></i> Düzenle
                        </button>
                        <button class="btn btn-outline-success" onclick="viewStudents('${pkg.name.toLowerCase()}')">
                            <i class="fas fa-users"></i> Öğrenciler
                        </button>
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = packagesHtml;
}

function editPackage(packageType) {
    // Paket tipine göre ID belirle
    let packageId;
    switch(packageType.toLowerCase()) {
        case 'lgs': packageId = 1; break;
        case 'tyt': packageId = 2; break;
        case 'ayt': packageId = 3; break;
        case 'canlı ders':
        case 'canli ders':
        case 'canlıders':
        case 'canliders': packageId = 4; break;
        default: return;
    }
    
    // Paket bilgilerini yükle
    loadPackageData(packageId);
}

function viewStudents(packageType) {
    // Paket tipine göre ID belirle
    let packageId;
    switch(packageType.toLowerCase()) {
        case 'lgs': packageId = 1; break;
        case 'tyt': packageId = 2; break;
        case 'ayt': packageId = 3; break;
        case 'canlı ders':
        case 'canli ders':
        case 'canlıders':
        case 'canliders': packageId = 4; break;
        default: return;
    }
    
    // Öğrenci listesini yükle
    loadPackageStudents(packageId, packageType.toUpperCase());
}

// Paket yönetimi fonksiyonları
function loadPackageData(packageId) {
    fetch(`/Package/GetById?id=${packageId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const pkg = data.data;
                
                // Modal başlığını güncelle
                document.getElementById('packageEditTitle').textContent = `${pkg.name} Paketi Düzenle`;
                
                // Form alanlarını doldur
                document.getElementById('packageId').value = pkg.id;
                document.getElementById('packageDescription').value = pkg.description;
                document.getElementById('packagePrice').value = pkg.price;
                document.getElementById('packageVideoCount').value = pkg.videoCount;
                document.getElementById('packageTestCount').value = pkg.testCount;
                document.getElementById('packageDuration').value = pkg.durationMonths;
                document.getElementById('packageIsActive').checked = pkg.isActive;
                
                // Özellikleri yükle
                loadPackageFeatures(pkg.features, pkg.name);
                
                // Modal'ı aç
                new bootstrap.Modal(document.getElementById('packageEditModal')).show();
            } else {
                alert('Paket bilgileri yüklenirken hata oluştu: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Paket bilgileri yüklenirken hata oluştu!');
        });
}

function loadPackageFeatures(featuresJson, packageName) {
    const featuresContainer = document.getElementById('packageFeatures');
    let features;
    
    try {
        features = JSON.parse(featuresJson || '{}');
    } catch (e) {
        features = {};
    }
    
    // Paket tipine göre özellik listesi
    let availableFeatures = {};
    
    switch(packageName.toUpperCase()) {
        case 'LGS':
            availableFeatures = {
                'matematik': 'Matematik',
                'turkce': 'Türkçe',
                'fen': 'Fen Bilimleri',
                'sosyal': 'Sosyal Bilgiler',
                'ingilizce': 'İngilizce'
            };
            break;
        case 'TYT':
            availableFeatures = {
                'matematik': 'Matematik',
                'turkce': 'Türkçe',
                'fen': 'Fen Bilimleri',
                'sosyal': 'Sosyal Bilimler'
            };
            break;
        case 'AYT':
            availableFeatures = {
                'matematik': 'Matematik',
                'fizik': 'Fizik',
                'kimya': 'Kimya',
                'biyoloji': 'Biyoloji'
            };
            break;
        case 'CANLI DERS':
        case 'CANLİ DERS':
            availableFeatures = {
                'matematik': 'Matematik',
                'canli_ders': 'Canlı Ders'
            };
            break;
    }
    
    let featuresHtml = '';
    for (const [key, label] of Object.entries(availableFeatures)) {
        const isChecked = features[key] ? 'checked' : '';
        featuresHtml += `
            <div class="col-md-6">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="feature_${key}" ${isChecked}>
                    <label class="form-check-label" for="feature_${key}">
                        ${label}
                    </label>
                </div>
            </div>
        `;
    }
    
    featuresContainer.innerHTML = featuresHtml;
}

function savePackage() {
    const packageId = document.getElementById('packageId').value;
    const description = document.getElementById('packageDescription').value;
    const price = parseFloat(document.getElementById('packagePrice').value);
    const videoCount = parseInt(document.getElementById('packageVideoCount').value);
    const testCount = parseInt(document.getElementById('packageTestCount').value);
    const duration = parseInt(document.getElementById('packageDuration').value);
    const isActive = document.getElementById('packageIsActive').checked;
    
    // Özellikleri topla
    const features = {};
    const featureInputs = document.querySelectorAll('#packageFeatures input[type="checkbox"]');
    featureInputs.forEach(input => {
        const key = input.id.replace('feature_', '');
        features[key] = input.checked;
    });
    
    const packageData = {
        id: parseInt(packageId),
        description: description,
        price: price,
        videoCount: videoCount,
        testCount: testCount,
        durationMonths: duration,
        features: JSON.stringify(features),
        isActive: isActive
    };
    
    // API'ye gönder
    fetch('/Package/Update', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(packageData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Paket başarıyla güncellendi!');
            
            // Modal'ı kapat
            bootstrap.Modal.getInstance(document.getElementById('packageEditModal')).hide();
            
            // Paketleri yeniden yükle
            loadPackages();
        } else {
            alert('Paket güncellenirken hata oluştu: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Paket güncellenirken hata oluştu!');
    });
}

function loadPackageStudents(packageId, packageName) {
    // Modal başlığını güncelle
    document.getElementById('studentsListTitle').textContent = `${packageName} Paketi Öğrencileri`;
    
    // Öğrenci listesini yükle
    fetch(`/Package/GetStudents?packageId=${packageId}`)
        .then(response => response.json())
        .then(data => {
            const container = document.getElementById('studentsListContainer');
            
            if (data.success && data.data.length > 0) {
                let studentsHtml = '<div class="row">';
                
                data.data.forEach(student => {
                    studentsHtml += `
                        <div class="col-md-6 mb-3">
                            <div class="card border-0 shadow-sm">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar me-3">
                                            <i class="fas fa-user-circle text-primary" style="font-size: 2rem;"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">${student.name}</h6>
                                            <small class="text-muted">${student.email}</small>
                                            <div class="mt-2">
                                                <span class="badge bg-success">Aktif</span>
                                                <small class="text-muted ms-2">${student.activatedAt}</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                studentsHtml += '</div>';
                container.innerHTML = studentsHtml;
            } else {
                container.innerHTML = '<div class="text-center p-4"><p class="text-muted">Bu paket için henüz öğrenci bulunmuyor.</p></div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('studentsListContainer').innerHTML = '<div class="text-center p-4"><p class="text-danger">Öğrenciler yüklenirken hata oluştu.</p></div>';
        });
    
    // Modal'ı aç
    new bootstrap.Modal(document.getElementById('studentsListModal')).show();
}

// Öğrenci listesini yükle
function loadStudents() {
    fetch('/Message/GetStudents')
        .then(response => response.json())
        .then(data => {
            const replyToStudent = document.getElementById('replyToStudent');
            const teacherMessageStudent = document.getElementById('teacherMessageStudent');
            
            // Öğrenci seçeneklerini temizle
            replyToStudent.innerHTML = '<option value="">Öğrenci Seçin</option>';
            teacherMessageStudent.innerHTML = '<option value="">Öğrenci Seçin</option>';
            
            if (data.success && data.data.length > 0) {
                data.data.forEach(student => {
                    const option1 = document.createElement('option');
                    option1.value = student.id;
                    option1.textContent = student.name;
                    replyToStudent.appendChild(option1);
                    
                    const option2 = document.createElement('option');
                    option2.value = student.id;
                    option2.textContent = student.name;
                    teacherMessageStudent.appendChild(option2);
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
}

// Gruplandırılmış mesajları yükle
function loadGroupedMessages() {
    console.log('loadGroupedMessages çağrıldı');
    fetch('/Message/GetGroupedMessages')
        .then(response => {
            console.log('Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data);
            const messageList = document.getElementById('studentMessageList');
            
            if (data.success && data.data.length > 0) {
                let messagesHtml = '';
                let totalUnreadCount = 0;
                
                data.data.forEach(student => {
                    // Toplam okunmamış mesaj sayısını hesapla
                    totalUnreadCount += student.unreadCount;
                    
                    // Öğrenci adının baş harflerini al
                    const nameParts = student.studentName.split(' ');
                    const initials = nameParts.map(part => part.charAt(0)).join('').toUpperCase();
                    
                    // Mesaj HTML'i oluştur
                    const unreadClass = student.unreadCount > 0 ? 'unread' : '';
                    const indicatorClass = student.isLastMessageFromMe ? 'sent' : 'received';
                    
                    messagesHtml += `
                        <div class="student-message-item ${unreadClass}" onclick="openStudentChat(${student.studentId}, '${student.studentName}')">
                            <div class="student-avatar">
                                ${initials}
                            </div>
                            <div class="student-content">
                                <div class="student-header">
                                    <span class="student-name">${student.studentName}</span>
                                    <span class="student-time">${student.lastMessageTime}</span>
                                </div>
                                <p class="student-last-message">
                                    ${student.isLastMessageFromMe ? 'Siz: ' : ''}${student.lastMessageContent.substring(0, 50)}${student.lastMessageContent.length > 50 ? '...' : ''}
                                </p>
                            </div>
                            ${student.unreadCount > 0 ? `<div class="unread-badge">${student.unreadCount}</div>` : ''}
                            <div class="message-indicator ${indicatorClass}"></div>
                        </div>
                    `;
                });
                
                // Toplam mesaj sayısını güncelle
                document.getElementById('messageCount').textContent = totalUnreadCount;
                
                messageList.innerHTML = messagesHtml;
            } else {
                messageList.innerHTML = '<div class="text-center p-4"><p class="text-muted">Henüz mesaj bulunmuyor.</p></div>';
                document.getElementById('messageCount').textContent = '0';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('studentMessageList').innerHTML = '<div class="text-center p-4"><p class="text-danger">Mesajlar yüklenirken hata oluştu.</p></div>';
        });
}

// Eski mesaj yükleme fonksiyonu (test için)
function loadMessages() {
    console.log('loadMessages çağrıldı');
    fetch('/Message/GetMessages')
        .then(response => {
            console.log('GetMessages Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('GetMessages Response data:', data);
            const messageList = document.getElementById('studentMessageList');
            
            if (data.success && data.data.length > 0) {
                let messagesHtml = '';
                let unreadCount = 0;
                
                data.data.forEach(message => {
                    // Okunmamış mesaj sayısını say
                    if (!message.isRead && !message.isSentByMe) {
                        unreadCount++;
                    }
                    
                    // Mesaj HTML'i oluştur
                    const messageClass = message.isSentByMe ? 'sent-message' : 'received-message';
                    const messageIcon = message.isSentByMe ? 'fas fa-paper-plane text-success' : 'fas fa-user-circle text-primary';
                    const studentId = message.isSentByMe ? message.receiverId : message.senderId;
                    const studentName = message.isSentByMe ? message.receiverName : message.senderName;
                    
                    messagesHtml += `
                        <div class="message-item ${messageClass}" onclick="openStudentChat(${studentId}, '${studentName}')">
                            <div class="message-avatar">
                                <i class="${messageIcon}"></i>
                            </div>
                            <div class="message-content">
                                <div class="message-header">
                                    <span class="message-sender">${message.isSentByMe ? 'Siz → ' + studentName : studentName}</span>
                                    <span class="message-time">${message.sentAt}</span>
                                    ${!message.isRead && !message.isSentByMe ? '<span class="badge bg-danger ms-2">Yeni</span>' : ''}
                                </div>
                                <p class="message-text">${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}</p>
                            </div>
                        </div>
                    `;
                });
                
                // Mesaj sayısını güncelle
                document.getElementById('messageCount').textContent = unreadCount;
                
                messageList.innerHTML = messagesHtml || '<div class="text-center p-4"><p class="text-muted">Henüz mesaj bulunmuyor.</p></div>';
            } else {
                messageList.innerHTML = '<div class="text-center p-4"><p class="text-muted">Henüz mesaj bulunmuyor.</p></div>';
                document.getElementById('messageCount').textContent = '0';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('studentMessageList').innerHTML = '<div class="text-center p-4"><p class="text-danger">Mesajlar yüklenirken hata oluştu.</p></div>';
        });
}

function markAsRead(messageId) {
    fetch('/Message/MarkAsRead', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ messageId: messageId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            loadGroupedMessages(); // Gruplandırılmış mesajları yeniden yükle
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function showReplyModal() {
    const selectedStudent = document.getElementById('replyToStudent').value;
    if (!selectedStudent) {
        alert('Lütfen önce bir öğrenci seçin!');
        return;
    }
    
    // Seçili öğrenciyi modal'da da seç
    document.getElementById('teacherMessageStudent').value = selectedStudent;
    
    // Modal'ı aç
    new bootstrap.Modal(document.getElementById('replyModal')).show();
}

function sendTeacherMessage() {
    const studentId = document.getElementById('teacherMessageStudent').value;
    const subject = document.getElementById('teacherMessageSubject').value;
    const content = document.getElementById('teacherMessageContent').value;
    
    if (!studentId || !subject || !content.trim()) {
        alert('Lütfen tüm alanları doldurun!');
        return;
    }
    
    // AJAX ile mesaj gönder
    fetch('/Message/Send', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            subject: subject,
            content: content,
            receiverId: parseInt(studentId)
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Mesajınız başarıyla gönderildi!');
            
            // Form temizle
            document.getElementById('teacherMessageForm').reset();
            
            // Modal'ı kapat
            bootstrap.Modal.getInstance(document.getElementById('replyModal')).hide();
            
            // Mesajları yeniden yükle
            loadGroupedMessages();
        } else {
            alert('Mesaj gönderilirken bir hata oluştu: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Mesaj gönderilirken bir hata oluştu!');
    });
}

let currentChatStudentId = null;
let currentChatStudentName = '';

function openStudentChat(studentId, studentName) {
    currentChatStudentId = studentId;
    currentChatStudentName = studentName;
    
    // Modal başlığını güncelle
    document.getElementById('chatStudentName').textContent = studentName + ' ile Sohbet';
    
    // Modal'ı aç
    new bootstrap.Modal(document.getElementById('studentChatModal')).show();
    
    // Sohbet mesajlarını yükle
    loadChatMessages(studentId);
}

function loadChatMessages(studentId) {
    fetch(`/Message/GetChatMessages?studentId=${studentId}`)
        .then(response => response.json())
        .then(data => {
            const chatMessages = document.getElementById('chatMessages');
            
            if (data.success && data.data.length > 0) {
                let messagesHtml = '';
                
                data.data.forEach(message => {
                    const isMyMessage = message.isSentByMe;
                    const messageClass = isMyMessage ? 'chat-message-sent' : 'chat-message-received';
                    const alignClass = isMyMessage ? 'justify-content-end' : 'justify-content-start';
                    
                    messagesHtml += `
                        <div class="d-flex ${alignClass} mb-3">
                            <div class="${messageClass}">
                                <div class="chat-message-content">
                                    <p class="mb-1">${message.content}</p>
                                    <small class="chat-message-time">${message.sentAt}</small>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                chatMessages.innerHTML = messagesHtml;
                
                // En alt mesaja scroll
                chatMessages.scrollTop = chatMessages.scrollHeight;
            } else {
                chatMessages.innerHTML = '<div class="text-center p-4"><p class="text-muted">Henüz mesaj bulunmuyor. İlk mesajı gönderin!</p></div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('chatMessages').innerHTML = '<div class="text-center p-4"><p class="text-danger">Sohbet yüklenirken hata oluştu.</p></div>';
        });
}

function sendChatMessage() {
    const subject = document.getElementById('chatMessageSubject').value;
    const content = document.getElementById('chatMessageContent').value;
    
    if (!content.trim()) {
        alert('Lütfen mesajınızı yazın!');
        return;
    }
    
    if (!currentChatStudentId) {
        alert('Öğrenci seçimi hatası!');
        return;
    }
    
    // AJAX ile mesaj gönder
    fetch('/Message/Send', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            subject: subject,
            content: content,
            receiverId: currentChatStudentId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Mesajı temizle
            document.getElementById('chatMessageContent').value = '';
            
            // Sohbeti yeniden yükle
            loadChatMessages(currentChatStudentId);
            
            // Ana mesaj listesini de güncelle
            loadGroupedMessages();
        } else {
            alert('Mesaj gönderilirken bir hata oluştu: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Mesaj gönderilirken bir hata oluştu!');
    });
}

// Enter tuşu ile mesaj gönderme
document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('keydown', function(event) {
        if (event.target.id === 'chatMessageContent' && event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendChatMessage();
        }
    });
});

// Talep yönetimi fonksiyonları
function loadRequests() {
    fetch('/Package/GetPendingRequests')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderRequests(data.data);
            } else {
                document.getElementById('requestsContainer').innerHTML = '<div class="text-center p-4"><p class="text-danger">Talepler yüklenirken hata oluştu.</p></div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('requestsContainer').innerHTML = '<div class="text-center p-4"><p class="text-danger">Talepler yüklenirken hata oluştu.</p></div>';
        });
}

function renderRequests(requests) {
    const container = document.getElementById('requestsContainer');
    
    if (requests.length === 0) {
        container.innerHTML = '<div class="text-center p-4"><p class="text-muted">Bekleyen talep bulunmuyor.</p></div>';
        return;
    }
    
    let requestsHtml = '';
    
    requests.forEach(request => {
        requestsHtml += `
            <div class="request-item mb-3 p-3 border rounded">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h6 class="mb-1">${request.studentName}</h6>
                        <p class="text-muted mb-1">${request.studentEmail}</p>
                        <p class="mb-1"><strong>Paket:</strong> ${request.packageName} (${request.packageGrade})</p>
                        <small class="text-muted">Talep Tarihi: ${request.requestedAt}</small>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-success btn-sm me-2" onclick="respondToRequest(${request.id}, 'Approved')">
                            <i class="fas fa-check me-1"></i>Onayla
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="respondToRequest(${request.id}, 'Rejected')">
                            <i class="fas fa-times me-1"></i>Reddet
                        </button>
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = requestsHtml;
}

function respondToRequest(requestId, status) {
    const isApproved = status === 'Approved';
    const title = isApproved ? 'Talebi Onayla' : 'Talebi Reddet';
    const text = isApproved ? 'Bu talebi onaylamak istediğinizden emin misiniz?' : 'Bu talebi reddetmek istediğinizden emin misiniz?';
    const icon = isApproved ? 'question' : 'warning';
    const confirmButtonText = isApproved ? 'Onayla' : 'Reddet';
    const confirmButtonColor = isApproved ? '#28a745' : '#dc3545';
    
    Swal.fire({
        title: title,
        text: text,
        icon: icon,
        showCancelButton: true,
        confirmButtonColor: confirmButtonColor,
        cancelButtonColor: '#6c757d',
        confirmButtonText: confirmButtonText,
        cancelButtonText: 'İptal'
    }).then((result) => {
        if (result.isConfirmed) {
            // Loading göster
            Swal.fire({
                title: 'İşlem yapılıyor...',
                text: 'Lütfen bekleyin',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            
            const responseMessage = isApproved ? 'Talebiniz onaylandı!' : 'Talebiniz reddedildi.';
            
            console.log('Gönderilen veri:', { requestId, status, message: responseMessage });
            
            fetch(`/Package/RespondToRequest?requestId=${requestId}&status=${status}&message=${encodeURIComponent(responseMessage)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    Swal.fire({
                        title: 'Başarılı!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonColor: '#28a745'
                    }).then(() => {
                        loadRequests(); // Talepleri yeniden yükle
                    });
                } else {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'İşlem başarısız: ' + data.message,
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Hata!',
                    text: 'İşlem sırasında hata oluştu!',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            });
        }
    });
}

// Sayfa yüklendiğinde
document.addEventListener('DOMContentLoaded', function() {
    // Paketleri yükle
    loadPackages();
    
    // Öğrenci listesini yükle
    loadStudents();
    
    // Talepleri yükle
    loadRequests();
    
    // Mesajları yükle (yeni fonksiyonu test et)
    loadGroupedMessages();
    
    // Her 5 saniyede bir mesajları yenile
    setInterval(loadGroupedMessages, 5000);
    
    // Her 10 saniyede bir talepleri yenile
    setInterval(loadRequests, 10000);
    
    // Eğer sohbet açıksa, sohbeti de yenile
    setInterval(function() {
        if (currentChatStudentId && document.getElementById('studentChatModal').classList.contains('show')) {
            loadChatMessages(currentChatStudentId);
        }
    }, 3000);
    
    // Gruplandırılmış mesajları da yenile
    setInterval(function() {
        if (!document.getElementById('studentChatModal').classList.contains('show')) {
            loadGroupedMessages();
        }
    }, 5000);
    
    // Test için debug bilgisi
    console.log('TeacherDashboard yüklendi');
    console.log('studentMessageList elementi:', document.getElementById('studentMessageList'));
});
</script>